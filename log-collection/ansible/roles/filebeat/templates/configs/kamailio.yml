- type: log
  paths:
    - /var/log/kamailio.log
  fields:
    _message_parser:
      type: multi
      parsers_list:
        - name: grok
          config:
            type: grok
            pattern: '%{DATA:timestamp:datetime:MMM ppd HH:mm:ss} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource:meta} %{SYSLOGPROG}: %{WORD:level:meta}: \{%{DATA:method:meta}\} - \{%{DATA:call-id:meta}\}%{GREEDYDATA:message}'
        - name: basic
          config:
            type: grok
            pattern: '%{DATA:timestamp:datetime:MMM ppd HH:mm:ss} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource:meta} %{SYSLOGPROG}: %{WORD:level:meta}: %{GREEDYDATA:message}'
  multiline.pattern: ^.
  multiline.negate: true
  multiline.match: after
  close_inactive: 90s
  harvester_limit: 5000
  scan_frequency: 1s
  symlinks: true
  clean_removed: true

- type: log
  paths:
    - /var/log/sipdump/*.data
  fields:
    _message_parser:
      type: multi
      applyAll: 'true'
      parsers:
        grok:
          type: grok
          pattern: |-
            ====================
            tag: %{WORD:capture.tag:text}
            pid: %{NUMBER:capture.pid:int}
            process: %{NUMBER:capture.process:int}
            time: %{NUMBER:capture.tsec:double}
            date: %{DATA:timestamp:datetime:EEE MMM d HH:mm:ss yyyy}
            proto: %{DATA:capture.proto:text}
            srcip: %{IPORHOST:capture.src.ip:text}
            srcport: %{INT:capture.src.port:text}
            dstip: %{IPORHOST:capture.dst.ip:text}
            dstport: %{INT:capture.dst.port:text}
            \~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~
            %{GREEDYDATA:message}
        sip:
          type: sip
          sortedFields: call-id,user-agent
  multiline.pattern: '^===================='
  multiline.negate: true
  multiline.match: after
  close_inactive: 90s
  harvester_limit: 5000
  scan_frequency: 1s
  symlinks: true
  clean_removed: true
